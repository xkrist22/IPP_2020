<?php
/**
 * File contains class for generating output HTML
 */

/**
 * Class html_gen is able to generate HTML document containing statistics about testing and basic info about test
 * @var string $head contains head tag of html file
 * @var string $stat contains generated statistics about testing
 * @var string $user contains header of table with results
 * @var int $passed_counter stores number of passed tests
 * @var int $failed_counter stores number of failed tests
 *
 */
class html_gen {
    private static $instance = null;

    private $head = "<!doctype html>\n<html lang=\"cz\">\n<head>\n<meta charset=\"utf-8\" />\n<title>IPP test framework results</title>\n\n";
    private $stat = "<div id=\"statistics\">\n";
    private $user = "<div class=\"head line\">\n<div>Tested file</div>\n<div>Expected value</div>\n<div>Actual value</div>\n<div>Result</div>\n</div>\n";
    private $passed_counter = 0;
    private $failed_counter = 0;

    /**
     * Method realises design pattern SINGLETON – if exists instance of class, this instance is returned, else is created new instance
     * @param string $tested_file contains info about tested file (same as constructor)
     * @return html_gen|null singleton instance of class html_gen
     */
    public static function get_instance($tested_file) {
        if (!self::$instance) {
            self::$instance = new html_gen($tested_file);
        }
        return self::$instance;
    }

    /**
     * html_gen constructor.
     * After calling is appended CSS to head, started creating of body and is created header of HTML document
     *
     * @param string $tested_file contains info about tested file (parser.php, interpret.py or both)
     */
    private function __construct($tested_file) {
        // print CSS
        $this->head = $this->head . CSS . "\n</head>\n\n";
        // print start of body
        $this->head = $this->head  . "<body>\n";
        $this->head = $this->head . "<h1><div>IPP test framework</div><div>File: " . $tested_file . "</div></h1>";
    }

    /**
     * Insert line into table containing info about test case – inserting passed test
     * @param string $file_name contains file name with path of the file containing tests
     * @param int $expected_value is value, which is expected to be generated by SUT
     * @param int $actual_value is value, which is actually generated by SUT
     */
    public function insert_passed($file_name, $expected_value, $actual_value) {
        $this->user = $this->user . "<div class=\"line\">\n<div>" . $file_name . "</div>\n<div>" . $expected_value . "</div>\n<div>" . $actual_value . "</div>\n<div class=\"passed\">PASSED</div>\n</div>\n";
        $this->passed_counter++;
    }

    /**
     * Insert line into table containing info about test case – inserting passed test
     * @param string $file_name contains file name with path of the file containing tests
     * @param int $expected_value is value, which is expected to be generated by SUT
     * @param int $actual_value is value, which is actually generated by SUT
     */
    public function insert_failed($file_name, $expected_value, $actual_value) {
        $this->user = $this->user . "<div class=\"line\">\n<div>" . $file_name . "</div>\n<div>" . $expected_value . "</div>\n<div>" . $actual_value . "</div>\n<div class=\"failed\">FAILED</div>\n</div>\n";
        $this->failed_counter++;
    }

    /**
     * Method generated statistics about testing SUT
     */
    public function create_stat() {
        $this->stat = $this->stat . "<div>Total tested files: <b>" . ($this->passed_counter + $this->failed_counter) . "</b></div>\n<div>Passed tests: <b>" . $this->passed_counter . "</b></div>\n<div>Failed tests: <b>" . $this->failed_counter . "</b></div>\n</div>\n";
    }

    /**
     * Method print generated HTML to stdout
     */
    public function print_html() {
        $this->create_stat();
        $out = $this->head . $this->stat . $this->user . "</body>\n</html>\n";
        printf("%s", $out);
    }
}
